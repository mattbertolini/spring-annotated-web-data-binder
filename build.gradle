plugins {
    id 'base'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

def springVersion = '5.3.5'

ext {
    projectsWithCoverage = []
    rootJacocoDir = "${rootProject.buildDir}/reports/jacoco/test"
    mergedExecFile = "${rootProject.buildDir}/jacoco/merged-test.exec"
    reportHtmlDir = "$rootJacocoDir/html/"
    reportXmlFile = "$rootJacocoDir/jacocoTestReport.xml"
}

ext.javadocLinks = [
    'https://docs.oracle.com/javase/8/docs/api/',
    'https://docs.oracle.com/javaee/7/api/',
    "https://docs.spring.io/spring/docs/$springVersion/javadoc-api/"
] as String[]

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.sonarqube'

    group 'com.mattbertolini'
    version '0.4.0-SNAPSHOT'
    
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation platform("org.springframework:spring-framework-bom:$springVersion")
        implementation platform('javax.servlet:javax.servlet-api:3.1.0')
        implementation platform('com.google.code.findbugs:jsr305:3.0.2')

        // Test
        implementation platform('org.junit:junit-bom:5.6.1')
        implementation platform('org.assertj:assertj-core:3.15.0')
        implementation platform('nl.jqno.equalsverifier:equalsverifier:3.1.13')
        implementation platform('org.mockito:mockito-core:3.3.3')
    }
    
    test {
        useJUnitPlatform()
    }

    javadoc {
        options {
            source = '8'
            links = rootProject.ext.javadocLinks
        }
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

repositories {
    mavenCentral()
}

evaluationDependsOnChildren()

task jacocoRootMerge(type: JacocoMerge) {
    dependsOn = projectsWithCoverage.test
    executionData files(projectsWithCoverage.jacocoTestReport.executionData)
    destinationFile = file(mergedExecFile)
}

task jacocoMergeReport(type: JacocoReport, dependsOn: jacocoRootMerge) {
    executionData.setFrom file(mergedExecFile)
    sourceDirectories.setFrom files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(projectsWithCoverage.sourceSets.main.output)
    

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false

        html.destination = file(reportHtmlDir)
        xml.destination = file(reportXmlFile)
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "mattbertolini_spring-annotated-web-data-binder"
//        property "sonar.coverage.jacoco.xmlReportPaths", reportXmlFile
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
