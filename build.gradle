plugins {
    id 'jvm-test-suite'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'org.sonarqube' version '2.8'
}

def springVersion = '5.3.8'
def springBootVersion = '2.4.7'

ext {
    rootJacocoDir = "${rootProject.buildDir}/reports/jacoco/testCodeCoverageReport"
    reportXmlFile = "$rootJacocoDir/jacocoTestReport.xml"
}

ext.javadocLinks = [
    'https://docs.oracle.com/javase/8/docs/api/',
    'https://docs.oracle.com/javaee/7/api/',
    "https://docs.spring.io/spring/docs/$springVersion/javadoc-api/",
    "https://docs.spring.io/spring-boot/docs/$springBootVersion/api/"
] as String[]

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jvm-test-suite'

    group 'com.mattbertolini'
    version '0.5.0-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

//    sourceCompatibility = 1.8

    dependencies {
        implementation platform("org.springframework:spring-framework-bom:$springVersion")
        implementation platform('javax.servlet:javax.servlet-api:3.1.0')
        implementation platform('com.google.code.findbugs:jsr305:3.0.2')

        constraints {
            implementation "org.springframework.boot:spring-boot-starter:$springBootVersion"
            implementation "org.springframework.boot:spring-boot-test:$springBootVersion"
        }

        // Test
        implementation platform('org.junit:junit-bom:5.6.1')
        implementation platform('org.assertj:assertj-core:3.15.0')
        implementation platform('nl.jqno.equalsverifier:equalsverifier:3.1.13')
        implementation platform('org.mockito:mockito-core:3.3.3')
    }
    
    testing {
        suites {
            test {
                useJUnitJupiter()
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }
    }

    test.finalizedBy jacocoTestReport

    javadoc {
        options {
            source = '8'
            links = rootProject.ext.javadocLinks
            addStringOption('Xdoclint:none', '-quiet')
        }
        if (java.toolchain.languageVersion.get().asInt() >= 9) {
            options.addBooleanOption('html5', true)
        }
    }
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

dependencies {
    jacocoAggregation project(":docs")
    jacocoAggregation project(":integration-tests")
    jacocoAggregation project(":spring-annotated-data-binder-core")
    jacocoAggregation project(":spring-webflux-annotated-data-binder")
    jacocoAggregation project(":spring-webmvc-annotated-data-binder")
    jacocoAggregation project(":webflux-annotated-data-binder-spring-boot-starter")
    jacocoAggregation project(":webmvc-annotated-data-binder-spring-boot-starter")
}

sonarqube {
    properties {
        property "sonar.projectKey", "mattbertolini_spring-annotated-web-data-binder"
//        property "sonar.coverage.jacoco.xmlReportPaths", reportXmlFile
    }
}
